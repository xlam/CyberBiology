package ru.cyberbiology;

import java.awt.Color;
import java.awt.Component;
import java.util.stream.Stream;
import javax.swing.BorderFactory;
import javax.swing.GroupLayout;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSeparator;
import javax.swing.JTable;
import javax.swing.LayoutStyle;
import javax.swing.ListSelectionModel;
import javax.swing.WindowConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import ru.cyberbiology.gene.BotGeneController;
import ru.cyberbiology.util.MiscUtils;

/**
 * Окно наблюдения за ботом.
 *
 * @author Sergey Sokolov (xlamserg@gmail.com)
 */
public class BotFrame extends JFrame {

    private final BasicBot bot;

    /**
     * Creates new form BotFrame.
     *
     * @param bot бот, информация о котором будет отображена в окне
     */
    public BotFrame(BasicBot bot) {
        super(bot.toString());
        this.bot = bot;
        initComponents();
    }

    //CHECKSTYLE:OFF

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new JPanel();
        jScrollPane1 = new JScrollPane();
        jlGenesHistory = new JList<>();
        jPanel2 = new JPanel();
        jScrollPane3 = new JScrollPane();
        jlProgram = new JList<>();
        jPanel3 = new JPanel();
        jlEnergyLable = new JLabel();
        jlEnergy = new JLabel();
        jlMineralsLabel = new JLabel();
        jlMinerals = new JLabel();
        jSeparator1 = new JSeparator();
        jScrollPane2 = new JScrollPane();
        jtGenome = new JTable();
        jlAddressLable = new JLabel();
        jlAddress = new JLabel();
        jlControllerDescription = new JLabel();
        jLabel1 = new JLabel();
        jLabel2 = new JLabel();
        jlState = new JLabel();
        jLabel4 = new JLabel();
        jLabel5 = new JLabel();
        jlPosX = new JLabel();
        jlPosY = new JLabel();

        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setName("jPanel1"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        jlGenesHistory.setBorder(BorderFactory.createTitledBorder("История генов"));
        jlGenesHistory.setName("jlGenesHistory"); // NOI18N
        jScrollPane1.setViewportView(jlGenesHistory);

        GroupLayout jPanel1Layout = new GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 206, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );

        jPanel2.setName("jPanel2"); // NOI18N

        jScrollPane3.setName("jScrollPane3"); // NOI18N

        jlProgram.setBorder(BorderFactory.createTitledBorder("Пр."));
        jlProgram.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        jlProgram.setName("jlProgram"); // NOI18N
        jScrollPane3.setViewportView(jlProgram);

        GroupLayout jPanel2Layout = new GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(jPanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, GroupLayout.DEFAULT_SIZE, 53, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(jPanel2Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3)
        );

        jPanel3.setBorder(BorderFactory.createTitledBorder("Параметры бота"));
        jPanel3.setName("jPanel3"); // NOI18N

        jlEnergyLable.setText("Энергия:");
        jlEnergyLable.setName("jlEnergyLable"); // NOI18N

        jlEnergy.setText("-");
        jlEnergy.setName("jlEnergy"); // NOI18N

        jlMineralsLabel.setText("Минералы:");
        jlMineralsLabel.setName("jlMineralsLabel"); // NOI18N

        jlMinerals.setText("-");
        jlMinerals.setName("jlMinerals"); // NOI18N

        jSeparator1.setName("jSeparator1"); // NOI18N

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        jtGenome.setModel(new DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "1", "2", "3", "4", "5", "6", "7", "8"
            }
        ) {
            Class[] types = new Class [] {
                Integer.class, Integer.class, Integer.class, Integer.class, Integer.class, Integer.class, Integer.class, Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtGenome.setCellSelectionEnabled(true);
        jtGenome.setName("jtGenome"); // NOI18N
        jtGenome.getTableHeader().setResizingAllowed(false);
        jtGenome.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(jtGenome);
        if (jtGenome.getColumnModel().getColumnCount() > 0) {
            jtGenome.getColumnModel().getColumn(0).setResizable(false);
            jtGenome.getColumnModel().getColumn(1).setResizable(false);
            jtGenome.getColumnModel().getColumn(2).setResizable(false);
            jtGenome.getColumnModel().getColumn(3).setResizable(false);
            jtGenome.getColumnModel().getColumn(4).setResizable(false);
            jtGenome.getColumnModel().getColumn(5).setResizable(false);
            jtGenome.getColumnModel().getColumn(6).setResizable(false);
            jtGenome.getColumnModel().getColumn(7).setResizable(false);
        }

        jlAddressLable.setText("УТК:");
        jlAddressLable.setName("jlAddressLable"); // NOI18N

        jlAddress.setText("-");
        jlAddress.setName("jlAddress"); // NOI18N

        jlControllerDescription.setText("-");
        jlControllerDescription.setName("jlControllerDescription"); // NOI18N

        jLabel1.setText("Команда:");
        jLabel1.setName("jLabel1"); // NOI18N

        jLabel2.setText("Состояние:");
        jLabel2.setName("jLabel2"); // NOI18N

        jlState.setText("-");
        jlState.setName("jlState"); // NOI18N

        jLabel4.setText("X:");
        jLabel4.setName("jLabel4"); // NOI18N

        jLabel5.setText("Y:");
        jLabel5.setName("jLabel5"); // NOI18N

        jlPosX.setText("-");
        jlPosX.setToolTipText("");
        jlPosX.setName("jlPosX"); // NOI18N

        jlPosY.setText("-");
        jlPosY.setName("jlPosY"); // NOI18N

        GroupLayout jPanel3Layout = new GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(jPanel3Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                            .addComponent(jlMineralsLabel)
                            .addComponent(jlEnergyLable)
                            .addComponent(jlAddressLable)
                            .addComponent(jLabel2))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                            .addComponent(jlAddress, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jlEnergy, GroupLayout.PREFERRED_SIZE, 70, GroupLayout.PREFERRED_SIZE)
                            .addComponent(jlState, GroupLayout.PREFERRED_SIZE, 70, GroupLayout.PREFERRED_SIZE)
                            .addComponent(jlMinerals, GroupLayout.PREFERRED_SIZE, 70, GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jlPosX))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jlPosY))))
                    .addComponent(jScrollPane2, GroupLayout.PREFERRED_SIZE, 162, GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSeparator1, GroupLayout.PREFERRED_SIZE, 187, GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jlControllerDescription))
                .addContainerGap(34, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(jPanel3Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jlState)
                    .addComponent(jLabel4)
                    .addComponent(jlPosX))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(jlEnergyLable)
                    .addComponent(jlEnergy)
                    .addComponent(jLabel5)
                    .addComponent(jlPosY))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(jlMineralsLabel)
                    .addComponent(jlMinerals))
                .addGap(4, 4, 4)
                .addGroup(jPanel3Layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(jlAddressLable)
                    .addComponent(jlAddress))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, GroupLayout.PREFERRED_SIZE, 10, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, GroupLayout.PREFERRED_SIZE, 169, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jlControllerDescription)
                .addContainerGap(31, Short.MAX_VALUE))
        );

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel3, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JLabel jLabel1;
    private JLabel jLabel2;
    private JLabel jLabel4;
    private JLabel jLabel5;
    private JPanel jPanel1;
    private JPanel jPanel2;
    private JPanel jPanel3;
    private JScrollPane jScrollPane1;
    private JScrollPane jScrollPane2;
    private JScrollPane jScrollPane3;
    private JSeparator jSeparator1;
    private JLabel jlAddress;
    private JLabel jlAddressLable;
    private JLabel jlControllerDescription;
    private JLabel jlEnergy;
    private JLabel jlEnergyLable;
    private JList<String> jlGenesHistory;
    private JLabel jlMinerals;
    private JLabel jlMineralsLabel;
    private JLabel jlPosX;
    private JLabel jlPosY;
    private JList<String> jlProgram;
    private JLabel jlState;
    private JTable jtGenome;
    // End of variables declaration//GEN-END:variables

    //CHECKSTYLE:ON

    /**
     * Обновляет информацию о боте.
     */
    public void update() {
        jlState.setText(String.valueOf(bot.alive));
        jlEnergy.setText(String.valueOf(bot.health));
        jlMinerals.setText(String.valueOf(bot.mineral));
        jlAddress.setText(String.valueOf(bot.adr));
        jlPosX.setText(String.valueOf(bot.posX));
        jlPosY.setText(String.valueOf(bot.posY));
        String[] history = bot.genesHistory.toStringArray();
        // TODO это не годится, нужно переделать!
        jlGenesHistory.setListData(Stream.of(history)
            .map(g -> {
                BotGeneController cont = bot.getGeneControllerForCommand(Integer.parseInt(g));
                return g + " [" + ((cont == null) ? "не назначено" : cont.getDescription()) + "]";
            })
            .toArray(String[]::new)
        );
        String[] program = MiscUtils.getProgram(history);
        if (program != null) {
            jlProgram.setListData(program);
        }
        TableModel genomeTableModel = jtGenome.getModel();
        for (int row = 0; row < Bot.MIND_SIZE / 8; row++) {
            for (int col = 0; col < Bot.MIND_SIZE / 8; col++) {
                genomeTableModel.setValueAt(bot.mind[row * 8 + col], row, col);
            }
        }
    }

    /**
     * Отображает окно бота.
     */
    public void showFrame() {
        for (int i = 0; i < 8; i++) {
            jtGenome.getColumnModel().getColumn(i).setCellRenderer(new CurrentCommandRenderer());
        }
        pack();
        update();
        setVisible(true);
    }

    /**
     * Подсвечивает ген, на который указывает УТК.
     */
    private class CurrentCommandRenderer extends DefaultTableCellRenderer {

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
            if (bot.adr == row * 8 + column) {
                c.setBackground(Color.RED);
                BotGeneController cont = bot.getGeneControllerForCommand(bot.mind[bot.adr]);
                jlControllerDescription.setText(
                        (cont == null) ? "не назначено" : cont.getDescription());
            } else {
                c.setBackground(Color.WHITE);
            }
            return c;
        }
    }
}
